CREATE TABLE  "ENTRANCE" 
   (	"ENTRANCE_ID" NUMBER NOT NULL ENABLE, 
	"ENTRANCE_NAME" VARCHAR2(45) DEFAULT NULL, 
	 PRIMARY KEY ("ENTRANCE_ID") ENABLE
   )
/
CREATE TABLE  "HA" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"NAME" NVARCHAR2(50), 
	 CONSTRAINT "HA_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "BUILDING" 
   (	"BUILDING_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"BUILDING_NUM" NUMBER(*,0), 
	"ENTRANCE_ID" NUMBER(*,0), 
	"POST_CODE" NUMBER(*,0), 
	"HAID" NUMBER, 
	 CONSTRAINT "BUILDING_PK" PRIMARY KEY ("BUILDING_ID") ENABLE
   )
/
CREATE TABLE  "APARTMENTS" 
   (	"AP_ID" NUMBER NOT NULL ENABLE, 
	"AP_NUMBER" NUMBER(3,0), 
	"AP_FLOOR" NUMBER(*,0), 
	"IDEAL_PART" NUMBER, 
	"BUILDING_ID" NUMBER, 
	"ENTRANCE_ID" NUMBER, 
	 CONSTRAINT "APARTMENTS_PK" PRIMARY KEY ("AP_ID") ENABLE
   )
/
CREATE TABLE  "EXPENSE_50" 
   (	"IDEXPENSE_50" NUMBER NOT NULL ENABLE, 
	"EXPENSE_50" NUMBER(2,0) DEFAULT NULL, 
	"BUILDING_ID" NUMBER(3,0) DEFAULT NULL, 
	"ENTRANCE_ID" NUMBER(2,0) DEFAULT NULL, 
	"HABITANTS_ID" NUMBER DEFAULT NULL, 
	"AP_ID" NUMBER DEFAULT NULL, 
	 CONSTRAINT "EXPENSE_50" PRIMARY KEY ("IDEXPENSE_50") ENABLE
   )
/
CREATE TABLE  "ART50" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"MRZ" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TILL" DATE, 
	 CONSTRAINT "ART50_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "CALC_METHOD" 
   (	"METHOD_ID" NUMBER NOT NULL ENABLE, 
	"METHOD_EXP" VARCHAR2(30), 
	 CONSTRAINT "CALC_METHOD_PK" PRIMARY KEY ("METHOD_ID") ENABLE
   )
/
CREATE TABLE  "EXPENSE_TYPE" 
   (	"IDEXPENCE_TYPE" NUMBER NOT NULL ENABLE, 
	"EXPENCE_TYPE" VARCHAR2(45) DEFAULT NULL, 
	 PRIMARY KEY ("IDEXPENCE_TYPE") ENABLE
   )
/
CREATE TABLE  "EXPENSES" 
   (	"IDEXPENCES" NUMBER NOT NULL ENABLE, 
	"BUILDING_ID" NUMBER DEFAULT NULL, 
	"ENTRANCE_ID" NUMBER DEFAULT NULL, 
	"IDPROVIDERS" NUMBER DEFAULT NULL, 
	"AMOUNT_EXP" NUMBER(10,0) DEFAULT NULL, 
	"DATE_EXP" DATE DEFAULT NULL, 
	"IDEXPENCE_TYPE" NUMBER DEFAULT NULL, 
	 CONSTRAINT "EXPENCES_COST_PRK" PRIMARY KEY ("IDEXPENCES") ENABLE
   )
/
CREATE TABLE  "SUPPLIER" 
   (	"ID_SUPPLIER" NUMBER NOT NULL ENABLE, 
	"SUPPLIER" VARCHAR2(255), 
	 CONSTRAINT "SUPPLIER_PK" PRIMARY KEY ("ID_SUPPLIER") ENABLE
   )
/
CREATE TABLE  "EXPENSES_LOG" 
   (	"ID" NUMBER, 
	"YEAR_EXP" NUMBER, 
	"MONTH_EXP" NUMBER, 
	"DATE_EXP" DATE, 
	"REFERENCE" VARCHAR2(30), 
	"ID_SUPPLIER" NUMBER, 
	"TOTAL" NUMBER, 
	"METHOD_ID" NUMBER, 
	"HABITANTS_NUMBER" NUMBER, 
	"HABITANTS" NUMBER, 
	"BUILDING_ID" NUMBER, 
	 CONSTRAINT "EXPENSES_LOG_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "EXPENSES_PRE" 
   (	"ID" NUMBER, 
	"ГОДИНА" NUMBER, 
	"МЕСЕЦ" NUMBER, 
	"ДАТА" DATE, 
	"НАИМЕНОВАНИЕ" VARCHAR2(30), 
	"ТЪРГОВЕЦ" VARCHAR2(30), 
	"СУМА" VARCHAR2(30), 
	"МЕТОД" VARCHAR2(30), 
	"БРОЙ_ЖИВ" NUMBER, 
	"НА_ЖИВ" VARCHAR2(30), 
	 CONSTRAINT "EXPENSES_PRE_PK" PRIMARY KEY ("ID") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "ROLES" 
   (	"ROLE_ID" NUMBER NOT NULL ENABLE, 
	"ROLE_NAME" VARCHAR2(45) DEFAULT NULL, 
	 CONSTRAINT "ROLES_PRK" PRIMARY KEY ("ROLE_ID") ENABLE
   )
/
CREATE TABLE  "HABITANTS" 
   (	"FIRST_NAME" VARCHAR2(50) DEFAULT NULL, 
	"MIDDLE_NAME" VARCHAR2(50) DEFAULT NULL, 
	"LAST_NAME" VARCHAR2(50) DEFAULT NULL, 
	"EGN" NUMBER DEFAULT NULL, 
	"AP_ID" NUMBER DEFAULT NULL, 
	"BUILDING_ID" NUMBER DEFAULT NULL, 
	"HABITANTS_ID" NUMBER NOT NULL ENABLE, 
	"ROLE_ID" NUMBER DEFAULT NULL, 
	"ID_HOUSEHOLD" NUMBER DEFAULT NULL, 
	"VALID_FROM" DATE DEFAULT NULL, 
	"VALID_TILL" DATE DEFAULT NULL, 
	 PRIMARY KEY ("HABITANTS_ID") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "HOUSEHOLDS" 
   (	"id_household" NUMBER NOT NULL ENABLE, 
	"HOUSEHOLD" VARCHAR2(100), 
	"BUILDING_ID" NUMBER, 
	"AP_ID" NUMBER, 
	"ACTIVE" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TILL" DATE, 
	 CONSTRAINT "HOUSEHOLDS_PK" PRIMARY KEY ("id_household") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "INCOME_LOG" 
   (	"ID" NUMBER, 
	"YEAR_INC" NUMBER, 
	"MONTH_INC" NUMBER, 
	"FLOOR_INC" NUMBER, 
	"AP_ID" NUMBER, 
	"BUILDING_ID" NUMBER, 
	"ID_HOUSEHOLD" NUMBER, 
	"AMOUNT" NUMBER, 
	"RIO" NUMBER, 
	"HAB_NUMBER" NUMBER, 
	"ART_51" NUMBER, 
	"MANAGEMENT_COST" NUMBER, 
	"ELECTR_ELEVATOR_AP" NUMBER, 
	"ELECTR_STAIRCASE_AP" NUMBER, 
	"TAX_ELEVATOR_AP" NUMBER, 
	"CLEANER_AP" NUMBER, 
	"RUN_COST_AP" NUMBER, 
	"BALANCE" NUMBER, 
	"ELECTR_ELEVATOR" NUMBER, 
	"ELECTR_STAIRCASE" NUMBER, 
	"TAX_ELEVATOR" NUMBER, 
	"CLEANER" NUMBER, 
	"RUN_COST" NUMBER, 
	"ID_COMPLEX" NUMBER, 
	"ENTRANCE_ID" NUMBER, 
	 CONSTRAINT "INCOME_LOG_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "INCOME_LOG_PRE" 
   (	"ID" NUMBER, 
	"ГОДИНА" NUMBER, 
	"МЕСЕЦ" NUMBER, 
	"ЕТ" NUMBER, 
	"АП" NUMBER, 
	"ФАМИЛИЯ" VARCHAR2(30), 
	"СУМА" VARCHAR2(30), 
	"РИО" VARCHAR2(30), 
	"БР_ЖИВ" VARCHAR2(30), 
	"ЧЛ_51" VARCHAR2(30), 
	"МЕНИДЖМЪНТ" VARCHAR2(10), 
	"ТОК_АСАНСЬОР_АП" VARCHAR2(30), 
	"ТОК_СТЪБЛИ_АП" VARCHAR2(30), 
	"ТАКСА_АС_АП" VARCHAR2(30), 
	"ЧИСТАЧКА_АП" VARCHAR2(30), 
	"ТЕК_РАЗХОДИ_АП" VARCHAR2(30), 
	"БАЛАНС" VARCHAR2(30), 
	"ТОК_АСАНСЬОР" VARCHAR2(30), 
	"ТОК_СТЪБЛИ" VARCHAR2(30), 
	"ТАКСА_АСАНСЬОР" VARCHAR2(30), 
	"ЧИСТАЧКА" VARCHAR2(30), 
	"ТЕК_РАЗХОДИ" VARCHAR2(30), 
	"ID_COMPLEX" NUMBER, 
	 CONSTRAINT "INCOME_LOG_PRE_PK" PRIMARY KEY ("ID") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "NMW" 
   (	"ID" NUMBER, 
	"VALIDFROM" DATE, 
	"VALIDTILL" DATE, 
	"MONTHLY" NUMBER, 
	"HOURLY" NUMBER, 
	"ACT" VARCHAR2(30), 
	 CONSTRAINT "NMW_PK" PRIMARY KEY ("ID") ENABLE
   )
/
ALTER TABLE  "APARTMENTS" ADD CONSTRAINT "APARTMENTS_BUILDING_FK" FOREIGN KEY ("BUILDING_ID")
	  REFERENCES  "BUILDING" ("BUILDING_ID") ENABLE
/
ALTER TABLE  "BUILDING" ADD CONSTRAINT "BUILDING_ENTRANCE_FK" FOREIGN KEY ("ENTRANCE_ID")
	  REFERENCES  "ENTRANCE" ("ENTRANCE_ID") ENABLE
/
ALTER TABLE  "BUILDING" ADD CONSTRAINT "BUILDING_HA_FK" FOREIGN KEY ("HAID")
	  REFERENCES  "HA" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "EXPENSES" ADD CONSTRAINT "EXPENCES_BUILDING_FK" FOREIGN KEY ("BUILDING_ID")
	  REFERENCES  "BUILDING" ("BUILDING_ID") ENABLE
/
ALTER TABLE  "EXPENSES" ADD CONSTRAINT "EXPENCES_EXPENCE_TYPE_FK" FOREIGN KEY ("IDEXPENCE_TYPE")
	  REFERENCES  "EXPENSE_TYPE" ("IDEXPENCE_TYPE") ENABLE
/
ALTER TABLE  "EXPENSES_LOG" ADD CONSTRAINT "EXPENSES_LOG_CALC_METHOD_FK" FOREIGN KEY ("METHOD_ID")
	  REFERENCES  "CALC_METHOD" ("METHOD_ID") ENABLE
/
ALTER TABLE  "EXPENSES_LOG" ADD CONSTRAINT "EXPENSES_LOG_CON" FOREIGN KEY ("BUILDING_ID")
	  REFERENCES  "BUILDING" ("BUILDING_ID") ENABLE
/
ALTER TABLE  "EXPENSES_LOG" ADD CONSTRAINT "EXPENSES_LOG_SUPPLIER_FK" FOREIGN KEY ("ID_SUPPLIER")
	  REFERENCES  "SUPPLIER" ("ID_SUPPLIER") ENABLE
/
ALTER TABLE  "EXPENSE_50" ADD CONSTRAINT "EXPENSE_50_APARTMENTS_FK" FOREIGN KEY ("AP_ID")
	  REFERENCES  "APARTMENTS" ("AP_ID") ENABLE
/
ALTER TABLE  "HABITANTS" ADD CONSTRAINT "HABITANTS_APARTMENTS_FK" FOREIGN KEY ("AP_ID")
	  REFERENCES  "APARTMENTS" ("AP_ID") ENABLE
/
ALTER TABLE  "HABITANTS" ADD CONSTRAINT "HABITANTS_BUILDING_FK" FOREIGN KEY ("BUILDING_ID")
	  REFERENCES  "BUILDING" ("BUILDING_ID") ENABLE
/
ALTER TABLE  "HABITANTS" ADD CONSTRAINT "HABITANTS_CON" FOREIGN KEY ("ROLE_ID")
	  REFERENCES  "ROLES" ("ROLE_ID") ENABLE
/
ALTER TABLE  "HOUSEHOLDS" ADD CONSTRAINT "HOUSEHOLDS_CON" FOREIGN KEY ("BUILDING_ID")
	  REFERENCES  "BUILDING" ("BUILDING_ID") ENABLE
/
ALTER TABLE  "INCOME_LOG" ADD CONSTRAINT "INCOME_LOG_APARTMENTS_FK" FOREIGN KEY ("AP_ID")
	  REFERENCES  "APARTMENTS" ("AP_ID") ENABLE
/
ALTER TABLE  "INCOME_LOG" ADD CONSTRAINT "INCOME_LOG_CON" FOREIGN KEY ("BUILDING_ID")
	  REFERENCES  "BUILDING" ("BUILDING_ID") ENABLE
/
ALTER TABLE  "INCOME_LOG" ADD CONSTRAINT "INCOME_LOG_ENTRANCE_FK" FOREIGN KEY ("ENTRANCE_ID")
	  REFERENCES  "ENTRANCE" ("ENTRANCE_ID") ENABLE
/
ALTER TABLE  "INCOME_LOG" ADD CONSTRAINT "INCOME_LOG_HOUSEHOLDS_FK" FOREIGN KEY ("ID_HOUSEHOLD")
	  REFERENCES  "HOUSEHOLDS" ("id_household") ENABLE
/
CREATE INDEX  "INCOME_LOG_IDX1" ON  "INCOME_LOG" ("BUILDING_ID", "ID", "ID_COMPLEX")
/
CREATE INDEX  "ROLES_IDX1" ON  "ROLES" ("ROLE_ID", "ROLE_NAME")
/
CREATE OR REPLACE PROCEDURE  "UPDATE_MRZ" is
begin
UPDATE ART50 t1
   SET t1.VALID_TILL =
       (WITH ART50_lead AS (
       						SELECT 
       							ID,
       							tt.VALID_FROM AS vf,
								LEAD(VALID_FROM,1) OVER (ORDER BY VALID_FROM)-1 AS vt
                            FROM ART50 tt)       
           SELECT t2.vt
           FROM ART50_lead t2
           WHERE t1.VALID_FROM = t2.vf 
          	AND t1.ID = t2.ID);
end;
/

 CREATE SEQUENCE   "NMW_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "INCOME_LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 13532 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "INCOME_LOG_PRE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1323 NOCACHE  NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "HOUSEHOLDS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "HA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "EXPENSES_PRE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 583 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "DEMO_USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ART50_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE
/

CREATE OR REPLACE TRIGGER  "bi_NMW" 
  before insert on "NMW"              
  for each row 
begin  
  if :new."ID" is null then
    select "NMW_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_NMW" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_EXPENSES_PRE"   
    before insert on "EXPENSES_PRE"                
    for each row
begin
    if :new."ID" is null then    
        select "EXPENSES_PRE_SEQ".nextval into :new."ID" from dual;
    end if;
end;
/
ALTER TRIGGER  "bi_EXPENSES_PRE" ENABLE
/
CREATE OR REPLACE TRIGGER  "INCOME_LOG_PRE_T1" 
BEFORE
insert on "INCOME_LOG_PRE"
for each row
begin

  SELECT INCOME_LOG_PRE_SEQ.NEXTVAL
  INTO   :new.id
  FROM   dual;
end;

/
ALTER TRIGGER  "INCOME_LOG_PRE_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "INCOME_BIR" 
BEFORE INSERT ON INCOME_LOG 
FOR EACH ROW

BEGIN
  SELECT income_log_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;

/
ALTER TRIGGER  "INCOME_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "HABITANTS_HOUSEHOLDID" 
BEFORE insert on "HABITANTS"
for each row
begin
if :NEW.HABITANTS_ID is null then 
    select 
        MAX(HABITANTS_ID)+1 into :NEW.HABITANTS_ID 
    from HABITANTS
    WHERE BUILDING_ID = :NEW.BUILDING_ID
    AND AP_ID = :NEW.AP_ID; 
end if; 
end;

/
ALTER TRIGGER  "HABITANTS_HOUSEHOLDID" ENABLE
/
CREATE OR REPLACE TRIGGER  "EXPENSES_LOG_T1" 
BEFORE
insert or update or delete on "EXPENSES_LOG"
for each row
begin
begin  
  if :new."ID" is null then
    select "EXPENSES_PRE_SEQ".nextval into :new."ID" from dual;
  end if;
end;
end;

/
ALTER TRIGGER  "EXPENSES_LOG_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_HOUSEHOLDS"   
before insert on "HOUSEHOLDS"
for each row
BEGIN
    if :NEW."id_household" is null then
        select "HOUSEHOLDS_SEQ".nextval into :NEW."id_household" from sys.dual;
    end if;
end; 
/
ALTER TRIGGER  "BI_HOUSEHOLDS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_HA" 
  before insert on "HA"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "HA_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_HA" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_ART50" 
  before insert on "ART50"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "ART50_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_ART50" ENABLE

/
CREATE OR REPLACE FORCE VIEW  "DUPLICATES" ("ID_COMPLEX", "COUNT") AS 
  select 
        ID_COMPLEX, 
        count(ID_COMPLEX) AS "COUNT"
    from INCOME_LOG
    group by ID_COMPLEX
    having count (ID_COMPLEX) > 1
    ORDER BY ID_COMPLEX DESC
/
CREATE OR REPLACE FORCE VIEW  "EC_EXPENSES_SORTED" ("ID", "YEAR_EXP", "MONTH_EXP", "DATE_EXP", "REFERENCE", "ID_SUPPLIER", "TOTAL", "METHOD_ID", "HABITANTS_NUMBER", "HABITANTS", "BUILDING_ID") AS 
  SELECT 
    "ID","YEAR_EXP","MONTH_EXP","DATE_EXP","REFERENCE","ID_SUPPLIER","TOTAL","METHOD_ID","HABITANTS_NUMBER","HABITANTS","BUILDING_ID"
FROM
    EXPENSES_LOG
ORDER BY DATE_EXP DESC
/
CREATE OR REPLACE FORCE VIEW  "EC_INCOME_SORTED" ("ID", "Година", "Месец", "Етаж", "ап.", "ЕС", "Фамилия", "Общо", "РИО", "бр. жив", "чл. 51", "доп.", "ток ас. ап.", "ток ст. ап.", "такса ас. ап.", "почистване ап.", "тек. разходи ап.", "баланс", "ток ас.", "ток ст.", "такса ас.", "почистване", "тек. разходи", "ID_COMPLEX") AS 
  	SELECT 
        ID AS "ID",
        YEAR_INC AS "Година",
        MONTH_INC AS "Месец",
        FLOOR_INC AS "Етаж",
        INCOME_LOG.AP_ID AS "ап.",
        INCOME_LOG.BUILDING_ID AS "ЕС",
        HOUSEHOLDS.HOUSEHOLD AS "Фамилия",
        AMOUNT AS "Общо",
        RIO AS "РИО",
        HAB_NUMBER AS "бр. жив",
        ART_51 AS "чл. 51",
        MANAGEMENT_COST AS "доп.",
        ELECTR_ELEVATOR_AP AS "ток ас. ап.",
        ELECTR_STAIRCASE_AP AS "ток ст. ап.",
        TAX_ELEVATOR_AP AS "такса ас. ап.",
        CLEANER_AP AS "почистване ап.",
        RUN_COST_AP AS "тек. разходи ап.",
        BALANCE AS "баланс",
        ELECTR_ELEVATOR  AS "ток ас.",
        ELECTR_STAIRCASE AS "ток ст.",
        TAX_ELEVATOR AS "такса ас.",
        CLEANER AS "почистване",
        RUN_COST AS "тек. разходи",
        ID_COMPLEX
    FROM INCOME_LOG
    JOIN HOUSEHOLDS ON INCOME_LOG.ID_HOUSEHOLD = HOUSEHOLDS."id_household"
    ORDER BY YEAR_INC DESC, MONTH_INC DESC, FLOOR_INC
/
CREATE OR REPLACE FORCE VIEW  "EC_REPORT" ("Година", "Месец", "Общо", "Ток стълби", "Ток асансьор", "Такса асансьор", "Почистване", "Текущи разходи") AS 
  SELECT
        YEAR_INC AS "Година",
        MONTH_INC AS "Месец",
        ROUND(SUM(AMOUNT),2) AS "Общо",
        ROUND(SUM(ELECTR_STAIRCASE_AP),2) AS "Ток стълби",
        ROUND(SUM(ELECTR_ELEVATOR_AP),2) AS "Ток асансьор",
        ROUND(SUM(TAX_ELEVATOR_AP),2) AS "Такса асансьор",
        ROUND(SUM(CLEANER_AP),2) AS "Почистване",
        ROUND(SUM(RUN_COST_AP),2) AS "Текущи разходи"
        FROM INCOME_LOG
        GROUP BY YEAR_INC , MONTH_INC
        ORDER BY YEAR_INC DESC, MONTH_INC
/
