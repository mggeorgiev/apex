CREATE TABLE  "PRE_RP" 
   (	"ID_PAYMENT" NUMBER NOT NULL ENABLE, 
	"CONTRAGENT" VARCHAR2(255), 
	"REF_NUMBER1" VARCHAR2(255), 
	"TIMESTAMP" VARCHAR2(20), 
	"REF_NUMBER2" VARCHAR2(255), 
	"AMOUNT" VARCHAR2(20), 
	 CONSTRAINT "PRE_RP_PK" PRIMARY KEY ("ID_PAYMENT") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "RP_ACCOUNTS" 
   (	"ID_ACCOUNT" NUMBER NOT NULL ENABLE, 
	"ACCOUNT_NAME" VARCHAR2(255), 
	 CONSTRAINT "PRE_ACCOUNT_PK" PRIMARY KEY ("ID_ACCOUNT") ENABLE
   )
/
CREATE TABLE  "RP_SERVICE" 
   (	"ID_SERVICE" NUMBER NOT NULL ENABLE, 
	"SERVICE_NAME" VARCHAR2(255), 
	 CONSTRAINT "RP_SERVICE_PK" PRIMARY KEY ("ID_SERVICE") ENABLE
   )
/
CREATE TABLE  "RP_CONTRAGENT" 
   (	"ID_CONTRAGENT" NUMBER NOT NULL ENABLE, 
	"CONTRAGENT" VARCHAR2(255), 
	"ID_ACCOUNT" NUMBER, 
	"ID_SERVICE" NUMBER, 
	 CONSTRAINT "REC_ACCOUNT_PK" PRIMARY KEY ("ID_CONTRAGENT") ENABLE
   )
/
CREATE TABLE  "RP_RECURRING_PAYMENTS" 
   (	"ID_PAYMENT" NUMBER NOT NULL ENABLE, 
	"TIME_STAMP" TIMESTAMP (6), 
	"CONTRAGENT" VARCHAR2(255), 
	"AMMOUNT" NUMBER, 
	"REF_NUMBER1" VARCHAR2(255), 
	"REF_NUMBER2" VARCHAR2(255), 
	"YEAR_RP" NUMBER, 
	"MONTH_RP" NUMBER, 
	"DAY_RP" NUMBER, 
	"ID_WEEKDAY" NUMBER, 
	"ID_CONTRAGENT" NUMBER, 
	"ID_ACCOUNT" NUMBER, 
	"ID_SERVICE" NUMBER, 
	 CONSTRAINT "RP_RECURRING_PAYMENTS_PK" PRIMARY KEY ("ID_PAYMENT") ENABLE
   )
/

ALTER TABLE  "RP_CONTRAGENT" ADD CONSTRAINT "RP_CONTRAGENT_RP_ACCOUNTS_FK" FOREIGN KEY ("ID_ACCOUNT")
	  REFERENCES  "RP_ACCOUNTS" ("ID_ACCOUNT") ENABLE
/
ALTER TABLE  "RP_CONTRAGENT" ADD CONSTRAINT "RP_CONTRAGENT_RP_SERVICE_FK" FOREIGN KEY ("ID_SERVICE")
	  REFERENCES  "RP_SERVICE" ("ID_SERVICE") ENABLE
/
CREATE INDEX  "RP_RECURRING_PAYMENTS_IDX2" ON  "RP_RECURRING_PAYMENTS" ("TIME_STAMP", "CONTRAGENT", "REF_NUMBER1", "REF_NUMBER2")
/

 CREATE SEQUENCE   "RP_SERVICE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2322 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "RP_RECURRING_PAYMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11207 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "REC_ACCOUNT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 63 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PRE_RP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2266 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PRE_RECURRING_PAYMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE
/

CREATE OR REPLACE TRIGGER  "RP_RECURRING_PAYMENTS_T1" 
    BEFORE insert on "RP_RECURRING_PAYMENTS"
    for each row
    BEGIN
        if :NEW."ID_PAYMENT" is null then
            select "RP_SERVICE_SEQ".nextval into :NEW."ID_PAYMENT" from sys.dual;
        end if;
    end; 
/

ALTER TRIGGER  "RP_RECURRING_PAYMENTS_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_credit_card" 
  before insert on "CC_CREDIT_CARD_PRE"              
  for each row 
begin  
  if :NEW."reference" is null then
    select "CREDIT_CARD_SEQ".nextval into :NEW."reference" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_credit_card" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_RP_SERVICE" 
  before insert on "RP_SERVICE"               
  for each row  
begin   
  if :NEW."ID_SERVICE" is null then 
    select "RP_SERVICE_SEQ".nextval into :NEW."ID_SERVICE" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_RP_SERVICE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_REC_ACCOUNT"
   before insert on "RP_CONTRAGENT"
    for each row
    BEGIN
            if :NEW."ID_CONTRAGENT" is null then
                 select "REC_ACCOUNT_SEQ".nextval into :NEW."ID_CONTRAGENT" from dual;
            end if;
    end; 
/
ALTER TRIGGER  "BI_REC_ACCOUNT" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_PRE_RP" 
  before insert on "PRE_RP"               
  for each row  
begin   
  if :NEW."ID_PAYMENT" is null then 
    select "PRE_RP_SEQ".nextval into :NEW."ID_PAYMENT" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_PRE_RP" ENABLE
/
CREATE OR REPLACE TRIGGER "BI_CONTRAGENTS"
    before insert on "CC_CONTRAGENTS"
    for each row
    BEGIN
        if :NEW."CONTRAGENT_ID" is null then
            select "CONTRAGENTS_SEQ".nextval into :NEW."CONTRAGENT_ID" from dual;
        end if;
    end; 
/
ALTER TRIGGER  "BI_CONTRAGENTS" ENABLE
/
CREATE OR REPLACE FORCE VIEW  "PRE_RP_SORTED" ("TIME_STAMP", "CONTRAGENT", "AMOUNT", "REF_NUMBER1", "REF_NUMBER2", "YEAR", "MONTH", "DAY", "ID_WEEKDAY", "ID_CONTRAGENT", "ID_ACCOUNT", "ID_SERVICE") AS 
  SELECT
        TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS') AS TIME_STAMP,
        PRE_RP.CONTRAGENT,
        TO_NUMBER( REPLACE(PRE_RP.AMOUNT, ' BGN')) AS AMOUNT,
        PRE_RP.REF_NUMBER1,
        PRE_RP.REF_NUMBER2,
        EXTRACT(YEAR FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS YEAR,
        EXTRACT(MONTH FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS MONTH,
        EXTRACT(DAY FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS DAY,
        TO_NUMBER(TO_CHAR(TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS'), 'd')),
        NULL,
        NULL,
        NULL
    FROM
        PRE_RP
        ORDER BY TIME_STAMP DESC
/

CREATE OR REPLACE FORCE VIEW  "PR_STAT_QUARTER" ("Тримесечие", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT      
        CEIL(MONTH_RP/3) AS "Тримесечие",    
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        ROUND(SUM(RP_RECURRING_PAYMENTS.AMMOUNT)/(select max(YEAR_RP)-min(YEAR_RP) FROM RP_RECURRING_PAYMENTS),2) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    GROUP BY CEIL(MONTH_RP/3)
    ORDER BY CEIL(MONTH_RP/3)
/

CREATE OR REPLACE FORCE VIEW  "RP_DESCRIPTIONS" ("ID_PAYMENT", "TIME_STAMP", "CONTRAGENT", "AMMOUNT", "AVG_AMMOUNT", "STDDEV_AMMOUNT", "YEAR_RP", "MONTH_RP", "DAY_RP", "WEEKDAY_BG", "ACCOUNT_NAME", "SERVICE_NAME") AS 
  SELECT 
    ID_PAYMENT,
    TIME_STAMP,
    rp.CONTRAGENT,
    AMMOUNT,
    AVG_AMMOUNT,
    STDDEV_AMMOUNT,
    YEAR_RP,
    MONTH_RP,
    DAY_RP,
    WEEKDAY_BG,
    ACCOUNT_NAME,
    SERVICE_NAME
    from RP_RECURRING_PAYMENTS rp
    JOIN (select 
                CONTRAGENT,
                COUNT(*) as CNT,
                ROUND(AVG(AMMOUNT),2) "AVG_AMMOUNT",
                ROUND(STDDEV(AMMOUNT),2) "STDDEV_AMMOUNT"
                from RP_RECURRING_PAYMENTS
                GROUP BY CONTRAGENT
                ORDER BY CNT DESC) stats
    ON rp.CONTRAGENT = stats.CONTRAGENT
    JOIN WEEKDAYS on WEEKDAYS.ID_WEEKDAY = rp.ID_WEEKDAY
    JOIN RP_ACCOUNTS ON RP_ACCOUNTS.ID_ACCOUNT = rp.ID_ACCOUNT
    JOIN RP_SERVICE ON RP_SERVICE.ID_SERVICE = rp.ID_SERVICE
    ORDER BY TIME_STAMP DESC
/
CREATE OR REPLACE FORCE VIEW  "RP_SORTED" ("ID_PAYMENT", "TIME_STAMP", "CONTRAGENT", "AMMOUNT", "REF_NUMBER1", "REF_NUMBER2", "YEAR_RP", "MONTH_RP", "DAY_RP", "ID_WEEKDAY", "ID_CONTRAGENT", "ID_ACCOUNT", "ID_SERVICE") AS 
  SELECT
        "ID_PAYMENT",
        "TIME_STAMP",
        "CONTRAGENT",
        "AMMOUNT",
        "REF_NUMBER1",
        "REF_NUMBER2",
        "YEAR_RP",
        "MONTH_RP",
        "DAY_RP",
        "ID_WEEKDAY",
        "ID_CONTRAGENT",
        "ID_ACCOUNT",
        "ID_SERVICE"
    from rp_recurring_payments
    order by TIME_STAMP DESC
/

CREATE OR REPLACE FORCE VIEW  "RP_STAT" ("Година", "Тримесечие", "Месец", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT  
        YEAR_RP AS "Година",    
        CEIL(MONTH_RP/3) AS "Тримесечие",    
        MONTH_RP AS "Месец",
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        SUM(RP_RECURRING_PAYMENTS.AMMOUNT) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    GROUP BY YEAR_RP, MONTH_RP
    ORDER BY YEAR_RP DESC, MONTH_RP
/

CREATE OR REPLACE FORCE VIEW  "RP_YEAR_STAT" ("Година", "ACCOUNT_NAME", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT  
        YEAR_RP AS "Година",
        ra.ACCOUNT_NAME,
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        SUM(RP_RECURRING_PAYMENTS.AMMOUNT) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    JOIN RP_ACCOUNTS ra on ra.ID_ACCOUNT = RP_RECURRING_PAYMENTS.ID_ACCOUNT
    GROUP BY YEAR_RP, ra.ACCOUNT_NAME
    ORDER BY YEAR_RP
/

create or replace procedure "ETL_RECURRING_PAYMENT"
is
begin
--Step 1
INSERT INTO RP_RECURRING_PAYMENTS
(
	TIME_STAMP,
	CONTRAGENT,
	AMMOUNT,
	REF_NUMBER1,
	REF_NUMBER2,
	YEAR_RP,
	MONTH_RP,
	DAY_RP,
	ID_WEEKDAY,
	ID_CONTRAGENT,
	ID_ACCOUNT,
    ID_SERVICE
)
SELECT * FROM PRE_RP_SORTED;


--Step 2
UPDATE RP_RECURRING_PAYMENTS
SET ID_CONTRAGENT=
                    (SELECT
                        RP_CONTRAGENT.ID_CONTRAGENT
                    FROM 
                        RP_CONTRAGENT
                    WHERE
                        RP_RECURRING_PAYMENTS.CONTRAGENT = RP_CONTRAGENT.CONTRAGENT)
WHERE ID_CONTRAGENT IS NULL;
    
--Step 3
UPDATE RP_RECURRING_PAYMENTS
SET ID_ACCOUNT =
                (SELECT 
                    ID_ACCOUNT
                FROM
                    RP_CONTRAGENT
                WHERE
                    RP_RECURRING_PAYMENTS.ID_CONTRAGENT = RP_CONTRAGENT.ID_CONTRAGENT)
WHERE ID_ACCOUNT IS NULL;	

--STEP 4
UPDATE RP_RECURRING_PAYMENTS SET ID_SERVICE = 2 WHERE CONTRAGENT LIKE '%Софий%' AND ID_SERVICE IS NULL;
UPDATE RP_RECURRING_PAYMENTS SET ID_SERVICE = 5 WHERE CONTRAGENT LIKE '%Топло%' AND ID_SERVICE IS NULL;

UPDATE RP_RECURRING_PAYMENTS
SET
    ID_SERVICE = 1
WHERE
    CONTRAGENT LIKE '%ЧЕЗ%'
    		OR CONTRAGENT LIKE '%Електроразпр%'
            OR CONTRAGENT LIKE '%ЕНЕРГО%'
            OR CONTRAGENT LIKE '%Е.ОН%'
			OR CONTRAGENT LIKE '%ЕВН%'
     AND ID_SERVICE IS NULL;

UPDATE
    RP_RECURRING_PAYMENTS
SET
    ID_SERVICE = 3
WHERE
    CONTRAGENT LIKE '%Гло%'
			OR CONTRAGENT LIKE '%ГЛОБ%'
			OR CONTRAGENT LIKE '%БТК%'
			OR CONTRAGENT LIKE '%VIVACOM%'
			OR CONTRAGENT LIKE '%Мобил%'
			OR CONTRAGENT LIKE '%М-тел%'
			OR CONTRAGENT LIKE '%М-Тел%'
			OR CONTRAGENT LIKE '%Telenor%'
     AND ID_SERVICE IS NULL;
                                                            
UPDATE
    RP_RECURRING_PAYMENTS
SET
    ID_SERVICE = 4
WHERE
    CONTRAGENT LIKE '%НЕТ%'
			OR CONTRAGENT LIKE '%Макс%'
            OR CONTRAGENT LIKE '%TV NET%'
            OR CONTRAGENT LIKE '%Мегалан%'
    AND ID_SERVICE IS NULL;

--remove existing
    DELETE FROM PRE_RP
    WHERE TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS') IN (SELECT TIME_STAMP FROM RP_RECURRING_PAYMENTS);


end;
