CREATE TABLE  "CC_AUTH" 
   (	
    "REFERENCE" VARCHAR2(255), 
	"ID" NUMBER
   )
/
CREATE TABLE  "CC_CARD_AUTHORIZATIONS" 
   (	
    "ID" NUMBER, 
	"PROC_CODE" NUMBER, 
	"ACT_CODE" NUMBER, 
	"PAN_STARS" VARCHAR2(30), 
	"FUNC_CODE" NUMBER, 
	"TERM_NAME_LOC" VARCHAR2(255), 
	"TR_CCY" VARCHAR2(30), 
	"TR_AM" NUMBER, 
	"CH_CCY" VARCHAR2(30), 
	"CH_AM" NUMBER, 
	"REST_AM" VARCHAR2(30), 
	"IBAN" VARCHAR2(30), 
	"MCC" NUMBER, 
	"SMS_REGISTRATION" NUMBER, 
	"APPROVED" NUMBER, 
	"ERR" NUMBER, 
	"NOTE" VARCHAR2(30), 
	"MSG_ID" NUMBER, 
	"TR_DATE12" DATE, 
	"CARD_REF_H" VARCHAR2(255), 
	"DR_CR_IND" VARCHAR2(1), 
	"OPERATION" VARCHAR2(255), 
	"DATE_TERM" DATE, 
	 CONSTRAINT "CARD_AUTHORIZATIONS_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "CC_CARD_AUTHORIZATIONS_PRE" 
   (	
    "PROC_CODE" NUMBER, 
	"ACT_CODE" NUMBER, 
	"PAN_STARS" VARCHAR2(30), 
	"FUNC_CODE" NUMBER, 
	"TERM_NAME_LOC" VARCHAR2(255), 
	"TR_CCY" VARCHAR2(30), 
	"TR_AM" NUMBER, 
	"CH_CCY" VARCHAR2(30), 
	"CH_AM" NUMBER, 
	"REST_AM" VARCHAR2(30), 
	"IBAN" VARCHAR2(30), 
	"MCC" NUMBER, 
	"SMS_REGISTRATION" NUMBER, 
	"APPROVED" NUMBER, 
	"ERR" NUMBER, 
	"NOTE" VARCHAR2(30), 
	"MSG_ID" NUMBER, 
	"TR_DATE12" DATE, 
	"CARD_REF_H" VARCHAR2(255), 
	"DR_CR_IND" VARCHAR2(1), 
	"OPERATION" VARCHAR2(255), 
	"DATE_TERM" DATE, 
	 CONSTRAINT "CARD_AUTHORIZATIONS_PRE_PK" PRIMARY KEY ("NOTE") DISABLE
   )
/
CREATE TABLE  "CC_CLASSIFICATION" 
   (	
    "ID_CLASSIFICATION" NUMBER NOT NULL ENABLE, 
	"CLASSIFICATION_COL" VARCHAR2(100), 
	 CONSTRAINT "CC_CLASSIFICATION_PK" PRIMARY KEY ("ID_CLASSIFICATION") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "CC_TYPE" 
   (	
    "ID" NUMBER NOT NULL ENABLE, 
	"TYPE" VARCHAR2(100), 
	 CONSTRAINT "CC_TYPE_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "CC_CLASSIFIER" 
   (	
    "ID_CONTRAGENT" NUMBER NOT NULL ENABLE, 
	"ID_TYPE" NUMBER, 
	"ID_CLASSIFICATION" NUMBER, 
	"SHORT_NAME" VARCHAR2(100), 
	 CONSTRAINT "CC_CLASSIFIER_PK" PRIMARY KEY ("ID_CONTRAGENT") ENABLE
   )
/
CREATE TABLE  "CC_CONTRAGENTS" 
   (	
    "CONTRAGENT_ID" NUMBER NOT NULL ENABLE, 
	"LEGAL_NAME" VARCHAR2(100), 
	"SHORT_NAME" VARCHAR2(100), 
	"ID_CONTRAGENT" NUMBER, 
	 CONSTRAINT "CONTRAGENTS_PK" PRIMARY KEY ("CONTRAGENT_ID") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "CC_CONTRAGENT_DICT" 
   (	
    "CONTRAGENT" VARCHAR2(500), 
	"TERM_NAME_LOC" VARCHAR2(500)
   )
/
CREATE TABLE  "WEEKDAYS" 
   (	
    "ID_WEEKDAY" NUMBER, 
	"WEEKDAY_NAME" VARCHAR2(50), 
	"WEEKDAY_BG" VARCHAR2(50), 
	 CONSTRAINT "WEEKDAYS_PK" PRIMARY KEY ("ID_WEEKDAY") ENABLE
   )
/
CREATE TABLE  "CC_CREDIT_CARD" 
   (	
    "reference" VARCHAR2(255) NOT NULL ENABLE, 
	"date_time" DATE, 
	"value_date" DATE, 
	"debit" NUMBER(38,2), 
	"credit" NUMBER(38,2), 
	"trname" VARCHAR2(500), 
	"contragent" VARCHAR2(500), 
	"rem_i" VARCHAR2(500), 
	"rem_ii" VARCHAR2(500), 
	"rem_iii" VARCHAR2(500), 
	"YEAR_CC" NUMBER, 
	"MONTH_CC" NUMBER, 
	"DAY_CC" NUMBER, 
	"ID_WEEKDAY" NUMBER, 
	"PERIOD" NUMBER, 
	"ID_CONTRAGENT" NUMBER, 
	"ID_TYPE" NUMBER, 
	"ID_CLASSIFICATION" NUMBER, 
	 CONSTRAINT "PK_CC_CREDIT_CARD_REFERENCE" PRIMARY KEY ("reference") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "CC_CREDIT_CARD_PRE" 
   (	
    "REFERENCE" VARCHAR2(255) NOT NULL ENABLE, 
	"DATETIME" VARCHAR2(50), 
	"VALUEDATE" VARCHAR2(50), 
	"DEBIT" VARCHAR2(50), 
	"CREDIT" VARCHAR2(50), 
	"TRNAME" VARCHAR2(500), 
	"REM_I" VARCHAR2(500), 
	"CONTRAGENT" VARCHAR2(500), 
	"REM_II" VARCHAR2(500), 
	"REM_III" VARCHAR2(500), 
	 CONSTRAINT "credit_card_PK" PRIMARY KEY ("REFERENCE") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "DC_FIB_SMART" 
   (	
    "ID" NUMBER, 
	"REFERENCE" VARCHAR2(30), 
	"DATETIME" DATE, 
	"VALUEDATE" DATE, 
	"DEBIT" NUMBER, 
	"CREDIT" NUMBER, 
	"TRNAME" VARCHAR2(255), 
	"CONTRAGENT" VARCHAR2(255), 
	"REM_I" VARCHAR2(255), 
	"REM_II" VARCHAR2(255), 
	"REM_III" VARCHAR2(255), 
	 CONSTRAINT "DC_FIB_SMART_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "DC_N26" 
   (	
    "ID" NUMBER, 
	"DATECOL" DATE, 
	"PAYEE" VARCHAR2(50), 
	"ACCOUNT_NUMBER" VARCHAR2(30), 
	"TRANSACTION_TYPE" VARCHAR2(30), 
	"PAYMENT_REFERENCE" VARCHAR2(100), 
	"CATEGORY" VARCHAR2(30), 
	"AMOUNT_EUR" NUMBER, 
	"AMOUNT_FOREIGN_CURRENCY" VARCHAR2(30), 
	"TYPE_FOREIGN_CURRENCY" VARCHAR2(30), 
	"EXCHANGE_RATE" NUMBER, 
	 CONSTRAINT "DC_N26_PRE_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "DC_REVOLUT" 
   (	
    "ID" NUMBER, 
	"COMPLETED_DATE" DATE, 
	"DESCRIPTION" VARCHAR2(255), 
	"PAID_OUT_EUR" NUMBER, 
	"PAID_IN_EUR" NUMBER, 
	"EXCHANGE_OUT" VARCHAR2(50), 
	"EXCHANGE_IN" VARCHAR2(50), 
	"BALANCE_EUR" NUMBER, 
	"CATEGORY" VARCHAR2(30), 
	"NOTES" VARCHAR2(30), 
	 CONSTRAINT "REVOLUT_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "HTMLDB_PLAN_TABLE" 
   (	
    "STATEMENT_ID" VARCHAR2(30), 
	"PLAN_ID" NUMBER, 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(4000), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(128), 
	"OBJECT_NAME" VARCHAR2(128), 
	"OBJECT_ALIAS" VARCHAR2(261), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(128), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"DEPTH" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0), 
	"ACCESS_PREDICATES" VARCHAR2(4000), 
	"FILTER_PREDICATES" VARCHAR2(4000), 
	"PROJECTION" VARCHAR2(4000), 
	"TIME" NUMBER(*,0), 
	"QBLOCK_NAME" VARCHAR2(128)
   )
/
CREATE TABLE  "PRE_N26" 
   (	
    "ID" NUMBER, 
	"DATECOL" DATE, 
	"PAYEE" VARCHAR2(50), 
	"ACCOUNT_NUMBER" VARCHAR2(30), 
	"TRANSACTION_TYPE" VARCHAR2(30), 
	"PAYMENT_REFERENCE" VARCHAR2(100), 
	"CATEGORY" VARCHAR2(30), 
	"AMOUNT_EUR" VARCHAR2(22), 
	"AMOUNT_FOREIGN_CURRENCY" VARCHAR2(30), 
	"TYPE_FOREIGN_CURRENCY" VARCHAR2(30), 
	"EXCHANGE_RATE" VARCHAR2(22), 
	 CONSTRAINT "N26_PRE_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "PRE_REVOLUT" 
   (	
    "ID" NUMBER, 
	"COMPLETED_DATE" DATE, 
	"DESCRIPTION" VARCHAR2(255), 
	"PAID_OUT_EUR" VARCHAR2(30), 
	"PAID_IN_EUR" VARCHAR2(30), 
	"EXCHANGE_OUT" VARCHAR2(30), 
	"EXCHANGE_IN" VARCHAR2(1), 
	"BALANCE_EUR" VARCHAR2(50), 
	"CATEGORY" VARCHAR2(30), 
	"NOTES" VARCHAR2(30), 
	 CONSTRAINT "PRE_REVOLUT_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "PRE_RP" 
   (	
    "ID_PAYMENT" NUMBER NOT NULL ENABLE, 
	"CONTRAGENT" VARCHAR2(255), 
	"REF_NUMBER1" VARCHAR2(255), 
	"TIMESTAMP" VARCHAR2(20), 
	"REF_NUMBER2" VARCHAR2(255), 
	"AMOUNT" VARCHAR2(20), 
	 CONSTRAINT "PRE_RP_PK" PRIMARY KEY ("ID_PAYMENT") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "RP_ACCOUNTS" 
   (	
    "ID_ACCOUNT" NUMBER NOT NULL ENABLE, 
	"ACCOUNT_NAME" VARCHAR2(255), 
	 CONSTRAINT "PRE_ACCOUNT_PK" PRIMARY KEY ("ID_ACCOUNT") ENABLE
   )
/
CREATE TABLE  "RP_SERVICE" 
   (	
    "ID_SERVICE" NUMBER NOT NULL ENABLE, 
	"SERVICE_NAME" VARCHAR2(255), 
	 CONSTRAINT "RP_SERVICE_PK" PRIMARY KEY ("ID_SERVICE") ENABLE
   )
/
CREATE TABLE  "RP_CONTRAGENT" 
   (	
    "ID_CONTRAGENT" NUMBER NOT NULL ENABLE, 
	"CONTRAGENT" VARCHAR2(255), 
	"ID_SERVICE" NUMBER, 
	"ID_ACCOUNT" NUMBER, 
	 CONSTRAINT "REC_ACCOUNT_PK" PRIMARY KEY ("ID_CONTRAGENT") ENABLE
   )
/
CREATE TABLE  "RP_RECURRING_PAYMENTS" 
   (	
    "ID_PAYMENT" NUMBER NOT NULL ENABLE, 
	"TIME_STAMP" TIMESTAMP (6), 
	"CONTRAGENT" VARCHAR2(255), 
	"AMMOUNT" NUMBER, 
	"REF_NUMBER1" VARCHAR2(255), 
	"REF_NUMBER2" VARCHAR2(255), 
	"YEAR_RP" NUMBER, 
	"MONTH_RP" NUMBER, 
	"DAY_RP" NUMBER, 
	"ID_WEEKDAY" NUMBER, 
	"ID_CONTRAGENT" NUMBER, 
	"ID_ACCOUNT" NUMBER, 
	 CONSTRAINT "PK_RP_RECURRING_PAYMENTS" PRIMARY KEY ("ID_PAYMENT") ENABLE
   )
/
CREATE GLOBAL TEMPORARY TABLE  "TEMP_TABLE_SESSION" 
   (	
    "reference" VARCHAR2(255) NOT NULL ENABLE, 
	"ID" NUMBER, 
	"value_date" DATE, 
	"DATE_TERM" DATE, 
	"contragent" VARCHAR2(500), 
	"TERM_NAME_LOC" VARCHAR2(255), 
	"debit" NUMBER(38,2), 
	"TR_AM" NUMBER, 
	"CH_AM" NUMBER
   ) ON COMMIT PRESERVE ROWS
/
ALTER TABLE  "CC_CONTRAGENTS" ADD CONSTRAINT "CC_CONTRAGENTS_CON" FOREIGN KEY ("ID_CONTRAGENT")
	  REFERENCES  "CC_CLASSIFIER" ("ID_CONTRAGENT") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CC_CLASSIFIER" ADD CONSTRAINT "FK_CC_CLASSIFIER_CLASSIF" FOREIGN KEY ("ID_CLASSIFICATION")
	  REFERENCES  "CC_CLASSIFICATION" ("ID_CLASSIFICATION") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CC_CLASSIFIER" ADD CONSTRAINT "FK_CC_CLASSIFIER_TYPE" FOREIGN KEY ("ID_TYPE")
	  REFERENCES  "CC_TYPE" ("ID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CC_CREDIT_CARD" ADD CONSTRAINT "FK_CC_CREDIT_CARD_CLASSIFIER" FOREIGN KEY ("ID_CONTRAGENT")
	  REFERENCES  "CC_CLASSIFIER" ("ID_CONTRAGENT") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CC_CREDIT_CARD" ADD CONSTRAINT "FK_CC_CREDIT_CARD_WEEKDAYS" FOREIGN KEY ("ID_WEEKDAY")
	  REFERENCES  "WEEKDAYS" ("ID_WEEKDAY") ENABLE
/
ALTER TABLE  "RP_RECURRING_PAYMENTS" ADD CONSTRAINT "FK_RP_ACCOUNTS" FOREIGN KEY ("ID_ACCOUNT")
	  REFERENCES  "RP_ACCOUNTS" ("ID_ACCOUNT") ENABLE
/
ALTER TABLE  "RP_RECURRING_PAYMENTS" ADD CONSTRAINT "FK_RP_CONTRAGENTS" FOREIGN KEY ("ID_CONTRAGENT")
	  REFERENCES  "RP_CONTRAGENT" ("ID_CONTRAGENT") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "RP_CONTRAGENT" ADD CONSTRAINT "FK_RP_CONTRAGENT_ACCOUNT" FOREIGN KEY ("ID_ACCOUNT")
	  REFERENCES  "RP_ACCOUNTS" ("ID_ACCOUNT") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "RP_CONTRAGENT" ADD CONSTRAINT "RP_CONTRAGENT_RP_SERVICE_FK" FOREIGN KEY ("ID_SERVICE")
	  REFERENCES  "RP_SERVICE" ("ID_SERVICE") ENABLE
/
Rem No function found to generate DDL.
CREATE INDEX  "CARD_AUTHORIZ_IDX_TERM_NAME" ON  "CC_CARD_AUTHORIZATIONS" ("TERM_NAME_LOC")
/
CREATE INDEX  "CC_CLASSIFIER_IDX1" ON  "CC_CLASSIFIER" ("ID_CONTRAGENT", "ID_TYPE", "ID_CLASSIFICATION", "SHORT_NAME")
/
CREATE INDEX  "CC_CONTRAGENTS_IDX1" ON  "CC_CONTRAGENTS" ("CONTRAGENT_ID", "ID_CONTRAGENT", "SHORT_NAME", "LEGAL_NAME")
/
CREATE INDEX  "CC_CONTRAGENT_DICT_IDX1" ON  "CC_CONTRAGENT_DICT" ("CONTRAGENT", "TERM_NAME_LOC")
/
CREATE INDEX  "CC_CREDIT_CARD_IDX_CREDIT" ON  "CC_CREDIT_CARD" ("date_time", "credit", "contragent", "ID_CONTRAGENT")
/
CREATE INDEX  "CC_CREDIT_CARD_IDX_DEBIT" ON  "CC_CREDIT_CARD" ("date_time", "debit", "contragent", "ID_CONTRAGENT")
/
CREATE INDEX  "DC_FIB_SMART_DATEIDX" ON  "DC_FIB_SMART" ("DATETIME", "ID", "DEBIT", "CREDIT")
/
CREATE INDEX  "RP_RECURRING_PAYMENTS_IDX2" ON  "RP_RECURRING_PAYMENTS" ("TIME_STAMP", "CONTRAGENT", "REF_NUMBER1", "REF_NUMBER2")
/
CREATE UNIQUE INDEX  "WEEKDAYS_IDX1" ON  "WEEKDAYS" ("ID_WEEKDAY", "WEEKDAY_NAME", "WEEKDAY_BG")
/
Rem No package found to generate DDL.
CREATE OR REPLACE PROCEDURE  "UPDATE_TEMP" is
begin
INSERT INTO TEMP_TABLE_SESSION ("reference", ID, "value_date", DATE_TERM, "contragent", TERM_NAME_LOC, "debit", TR_AM, CH_AM) SELECT DISTINCT
	"reference"	,ID
	,"value_date"	,DATE_TERM
	,"contragent"	,TERM_NAME_LOC
	,"debit"	,TR_AM
	,CH_AM
FROM CC_CREDIT_CARD ccc, CC_CARD_AUTHORIZATIONS ca
WHERE 
"contragent" LIKE TERM_NAME_LOC || '%'AND "value_date" = DATE_TERMAND "debit" = CH_AMORDER BY "value_date" DESC, DATE_TERM DESC;end;
/

CREATE OR REPLACE PROCEDURE  "UPDATE_CC_AUTH" is
BEGIN
	
	INSERT INTO CC_AUTH(REFERENCE)
	SELECT DISTINCT "reference" FROM CC_CREDIT_CARD ccc	MINUS
	SELECT REFERENCE FROM CC_AUTH ca;

	INSERT INTO TEMP_TABLE_SESSION ("reference", ID, "value_date", DATE_TERM, "contragent", TERM_NAME_LOC, "debit", TR_AM, CH_AM) 	SELECT DISTINCT
		"reference"		,ID
		,"value_date"		,DATE_TERM
		,"contragent"		,ca.TERM_NAME_LOC
		,"debit"		,TR_AM
		,CH_AM
	FROM CC_CREDIT_CARD ccc, CC_CARD_AUTHORIZATIONS ca, CC_CONTRAGENT_DICT cd
	WHERE cd.TERM_NAME_LOC = ca.TERM_NAME_LOC
	AND "value_date" = DATE_TERM	AND "debit" = CH_AM	AND ccc."contragent" = cd.CONTRAGENT	AND ca.ACT_CODE = 0
	ORDER BY "value_date" DESC, DATE_TERM DESC;
	DELETE FROM TEMP_TABLE_SESSION tts
	WHERE "reference" = '010ZCMG19289013C' AND ID = 2995;	DELETE FROM TEMP_TABLE_SESSION tts
	WHERE "reference" = '010ZCMG19289027T' AND ID = 2994;	DELETE FROM TEMP_TABLE_SESSION tts
	WHERE "reference" = '010ZCMG1930202JL' AND ID = 3274;	DELETE FROM TEMP_TABLE_SESSION tts
	WHERE "reference" = '010ZCMG1930202MP' AND ID = 3273;	DELETE FROM TEMP_TABLE_SESSION tts
	WHERE "reference" = '010ZCMG2014002M5' AND ID = 3819;
	UPDATE CC_AUTH CC
	SET ID = (SELECT ID FROM  temp_table_session ts WHERE ts."reference" = CC.REFERENCE)	WHERE EXISTS (SELECT 1 FROM TEMP_TABLE_SESSION ts WHERE TS."reference" = CC.REFERENCE)	AND CC.ID IS NULL;
end;
/

CREATE OR REPLACE PROCEDURE  "INSERT_CC_DICT" is
begin
    INSERT INTO CC_CONTRAGENT_DICT(CONTRAGENT)
    SELECT DISTINCT ccc."contragent" FROM CC_CREDIT_CARD ccc    MINUS
    SELECT CONTRAGENT FROM CC_CONTRAGENT_DICT ccd;
end;
/

CREATE OR REPLACE PROCEDURE  "EXPORT_CC_AFTRER" (after_date IN VARCHAR2) 
is 
   tempTable CC_CREDIT_CARD %ROWTYPE; 
begin 
	SELECT * INTO tempTable FROM CC_CREDIT_CARD 
	WHERE "date_time" > TO_DATE(after_date, 'YYYY-MM-DD')
	ORDER BY "date_time";
end;
/

CREATE OR REPLACE PROCEDURE  "ETL_RECURRING_PAYMENT" is
begin
--Step 1
INSERT INTO RP_RECURRING_PAYMENTS
(
	TIME_STAMP,
	CONTRAGENT,
	AMMOUNT,
	REF_NUMBER1,
	REF_NUMBER2,
	YEAR_RP,
	MONTH_RP,
	DAY_RP,
	ID_WEEKDAY,
	ID_CONTRAGENT,
	ID_ACCOUNT
)
SELECT * FROM PRE_RP_SORTED;


--Step 2
UPDATE RP_RECURRING_PAYMENTS
SET ID_CONTRAGENT=
                    (SELECT
                        RP_CONTRAGENT.ID_CONTRAGENT
                    FROM 
                        RP_CONTRAGENT
                    WHERE
                        RP_RECURRING_PAYMENTS.CONTRAGENT = RP_CONTRAGENT.CONTRAGENT)
WHERE ID_CONTRAGENT IS NULL;
    
--Step 3
UPDATE RP_RECURRING_PAYMENTS
SET ID_ACCOUNT =
               (SELECT 
                   ID_ACCOUNT
               FROM
                   RP_CONTRAGENT
               WHERE
                   RP_RECURRING_PAYMENTS.ID_CONTRAGENT = RP_CONTRAGENT.ID_CONTRAGENT)
WHERE ID_ACCOUNT IS NULL;	

--STEP 4
-- UPDATE RP_RECURRING_PAYMENTS SET ID_SERVICE = 2 WHERE CONTRAGENT LIKE '%Софий%' AND ID_SERVICE IS NULL;-- UPDATE RP_RECURRING_PAYMENTS SET ID_SERVICE = 5 WHERE CONTRAGENT LIKE '%Топло%' AND ID_SERVICE IS NULL;
-- UPDATE RP_RECURRING_PAYMENTS
-- SET
--     ID_SERVICE = 1
-- WHERE
--     CONTRAGENT LIKE '%ЧЕЗ%'--     		OR CONTRAGENT LIKE '%Електроразпр%'--             OR CONTRAGENT LIKE '%ЕНЕРГО%'--             OR CONTRAGENT LIKE '%Е.ОН%'-- 			OR CONTRAGENT LIKE '%ЕВН%'--      AND ID_SERVICE IS NULL;

-- UPDATE
--     RP_RECURRING_PAYMENTS
-- SET
--     ID_SERVICE = 3
-- WHERE
--     CONTRAGENT LIKE '%Гло%'-- 			OR CONTRAGENT LIKE '%ГЛОБ%'-- 			OR CONTRAGENT LIKE '%БТК%'-- 			OR CONTRAGENT LIKE '%VIVACOM%'-- 			OR CONTRAGENT LIKE '%Мобил%'-- 			OR CONTRAGENT LIKE '%М-тел%'-- 			OR CONTRAGENT LIKE '%М-Тел%'-- 			OR CONTRAGENT LIKE '%Telenor%'--      AND ID_SERVICE IS NULL;
                                                            
-- UPDATE
--     RP_RECURRING_PAYMENTS
-- SET
--     ID_SERVICE = 4
-- WHERE
--     CONTRAGENT LIKE '%НЕТ%'-- 			OR CONTRAGENT LIKE '%Макс%'--             OR CONTRAGENT LIKE '%TV NET%'--             OR CONTRAGENT LIKE '%Мегалан%'--     AND ID_SERVICE IS NULL;

--remove existing
    DELETE FROM PRE_RP
    WHERE TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS') IN (SELECT TIME_STAMP FROM RP_RECURRING_PAYMENTS);

end;
/

CREATE OR REPLACE PROCEDURE  "ETL_DC_REVOLUT" is
begin
--remove existing
    DELETE FROM 
        PRE_REVOLUT
    WHERE ID IN (SELECT ID FROM DC_REVOLUT);
--- Insert the new records from the pre to the prod table
INSERT INTO DC_REVOLUT (ID, COMPLETED_DATE, DESCRIPTION, PAID_OUT_EUR, PAID_IN_EUR,EXCHANGE_OUT,EXCHANGE_IN,BALANCE_EUR,CATEGORY,NOTES)

SELECT
	ID
	,COMPLETED_DATE
	,DESCRIPTION 
	,TO_NUMBER(REPLACE(PAID_OUT_EUR, ',')) AS PAID_OUT_EUR	,TO_NUMBER(REPLACE(PAID_IN_EUR, ',')) AS PAID_IN_EUR 	,EXCHANGE_OUT 
	,EXCHANGE_IN 
	,TO_NUMBER(REPLACE(BALANCE_EUR, ',')) AS BALANCE_EUR 	,CATEGORY 
	,NOTES 
	FROM PRE_REVOLUT pr ORDER BY COMPLETED_DATE DESC;

--remove the transferred
    DELETE FROM 
        PRE_REVOLUT
    WHERE ID IN (SELECT ID FROM DC_REVOLUT);
end;
/

CREATE OR REPLACE PROCEDURE  "ETL_DC_N26" is
begin
INSERT INTO DC_N26
(ID, DATECOL, PAYEE, ACCOUNT_NUMBER, TRANSACTION_TYPE, PAYMENT_REFERENCE, CATEGORY, AMOUNT_EUR, AMOUNT_FOREIGN_CURRENCY, TYPE_FOREIGN_CURRENCY, EXCHANGE_RATE)
SELECT 
	ID
	,DATECOL
	,PAYEE
	,ACCOUNT_NUMBER
	,TRANSACTION_TYPE
	,PAYMENT_REFERENCE
	,CATEGORY
	,TO_NUMBER(AMOUNT_EUR)
	,AMOUNT_FOREIGN_CURRENCY
	,TYPE_FOREIGN_CURRENCY
	,TO_NUMBER(EXCHANGE_RATE)
FROM PRE_N26;

--delete imported
    DELETE FROM 
        PRE_N26
    WHERE ID IN (SELECT ID FROM DC_N26 dn);
end;
/

CREATE OR REPLACE PROCEDURE  "ETL_CREDIT_CARD" is
begin

--remove existing
    DELETE FROM 
        CC_CREDIT_CARD_PRE
    WHERE REFERENCE IN (SELECT "reference" FROM CC_CREDIT_CARD);
--Insert data from export to production
    INSERT INTO
		CC_CREDIT_CARD
		("reference",		"date_time",		"value_date",		"debit",		"credit",		"trname",		"contragent",		"rem_i",		"rem_ii",		"rem_iii",		"YEAR_CC",		"MONTH_CC",		"DAY_CC",		"ID_WEEKDAY",        "PERIOD")	SELECT
		REFERENCE,
		TO_DATE(datetime, 'dd/mm/yyyy'),		TO_DATE(valuedate, 'dd/mm/yyyy'),		TO_NUMBER(debit),
		TO_NUMBER(credit),
		TRNAME,
		REM_I,
        contragent,
		rem_ii,
		rem_iii,
		EXTRACT(YEAR FROM TO_DATE(valuedate, 'dd/mm/yyyy')),		EXTRACT(MONTH FROM TO_DATE(valuedate, 'dd/mm/yyyy')),		EXTRACT(DAY FROM TO_DATE(valuedate, 'dd/mm/yyyy')),		TO_NUMBER(TO_CHAR(TO_DATE(valuedate, 'dd/mm/yyyy'), 'd')),			CASE
			WHEN EXTRACT(DAY FROM TO_DATE(datetime, 'dd/mm/yyyy')) > 19 THEN 					(CASE 
					WHEN EXTRACT(MONTH FROM TO_DATE(datetime, 'dd/mm/yyyy')) = 12 THEN 1					ELSE EXTRACT(MONTH FROM TO_DATE(datetime, 'dd/mm/yyyy')) + 1 END)			ELSE EXTRACT(MONTH FROM TO_DATE(datetime, 'dd/mm/yyyy'))		END		
	FROM CC_CREDIT_CARD_PRE;

    --Enrich data
    
    --Update Classification
--    FOR Lcntr IN 1..5 LOOP
--        UPDATE CC_CREDIT_CARD
--            SET ID_CLASSIFICATION = Lcntr
--        WHERE ID_CLASSIFICATION IS NULL
--        AND "contragent" --        IN (SELECT LEGAL_NAME FROM CC_CONTRAGENTS cc
--							  JOIN CC_CLASSIFIER ca ON cc.SHORT_NAME = ca.SHORT_NAME
--							  where ca.ID_CLASSIFICATION = Lcntr);
--    END LOOP;
    
    --Update
    
    UPDATE CC_CREDIT_CARD
        SET "contragent" = "trname"        WHERE "trname" = 'Лихви кредитни карти'        OR "trname" = 'Пълно погасяване'        OR "trname" = 'Бонус точки'        OR "trname" = 'Такси картови операции'        AND "contragent" IS NULL;
    -- UPDATE FOREIGN KEYS 
    UPDATE CC_CREDIT_CARD
        SET 
            ID_CONTRAGENT = (SELECT ID_CONTRAGENT FROM CC_CONTRAGENTS WHERE CC_CONTRAGENTS.LEGAL_NAME = "contragent"),            ID_TYPE = (SELECT ID_TYPE FROM CC_CLASSIFIER WHERE CC_CLASSIFIER.ID_CONTRAGENT = CC_CREDIT_CARD.ID_CONTRAGENT),
            ID_CLASSIFICATION = (SELECT ID_CLASSIFICATION FROM CC_CLASSIFIER WHERE CC_CLASSIFIER.ID_CONTRAGENT = CC_CREDIT_CARD.ID_CONTRAGENT)
        WHERE ID_TYPE IS NULL
        AND   ID_CONTRAGENT IS NULL
        AND   ID_CLASSIFICATION IS NULL;

--delete imported
    DELETE FROM 
        CC_CREDIT_CARD_PRE
    WHERE reference IN (SELECT "reference" FROM CC_CREDIT_CARD);
end;
/

CREATE OR REPLACE PROCEDURE  "ETL_CC_AUTHORIZATIONS" 
IS
BEGIN
	INSERT INTO CC_CARD_AUTHORIZATIONS (PROC_CODE, ACT_CODE, PAN_STARS, FUNC_CODE, TERM_NAME_LOC, TR_CCY, TR_AM, CH_CCY, CH_AM, REST_AM, IBAN, MCC, SMS_REGISTRATION, APPROVED, ERR, NOTE, MSG_ID, TR_DATE12, CARD_REF_H, DR_CR_IND, OPERATION, DATE_TERM)
	(
		SELECT PROC_CODE, ACT_CODE, PAN_STARS, FUNC_CODE, TERM_NAME_LOC, TR_CCY, TR_AM, CH_CCY, CH_AM, REST_AM, IBAN, MCC, SMS_REGISTRATION, APPROVED, ERR, NOTE, MSG_ID, TR_DATE12, CARD_REF_H, DR_CR_IND, OPERATION, DATE_TERM FROM CC_CARD_AUTHORIZATIONS_PRE
		MINUS
		SELECT PROC_CODE, ACT_CODE, PAN_STARS, FUNC_CODE, TERM_NAME_LOC, TR_CCY, TR_AM, CH_CCY, CH_AM, REST_AM, IBAN, MCC, SMS_REGISTRATION, APPROVED, ERR, NOTE, MSG_ID, TR_DATE12, CARD_REF_H, DR_CR_IND, OPERATION, DATE_TERM FROM CC_CARD_AUTHORIZATIONS
	);
        DELETE CC_CARD_AUTHORIZATIONS_PRE;
END ETL_CC_AUTHORIZATIONS;
/

 CREATE SEQUENCE   "RP_SERVICE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2705 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "RP_RECURRING_PAYMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11207 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "REC_ACCOUNT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 106 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PRE_RP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2609 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PRE_REVOLUT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 948 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PRE_RECURRING_PAYMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "N26_PRE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "DC_FIB_SMART_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 406 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CREDIT_CARD_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CREDIT_CARD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CONTRAGENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2372 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CC_TYPE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CARD_AUT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3121 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CARD_AUTHORIZATIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3925 CACHE 20 NOORDER  NOCYCLE
/
Rem No synonym found to generate DDL.
CREATE OR REPLACE TRIGGER  "bi_PRE_REVOLUT" 
  before insert on "PRE_REVOLUT"              
  for each row 
begin  
  if :new."ID" is null then
    select "PRE_REVOLUT_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_PRE_REVOLUT" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_N26_PRE" 
  before insert on "PRE_N26"              
  for each row 
begin  
  if :new."ID" is null then
    select "N26_PRE_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_N26_PRE" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_DC_FIB_SMART" 
  before insert on "DC_FIB_SMART"              
  for each row 
begin  
  if :new."ID" is null then
    select "DC_FIB_SMART_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_DC_FIB_SMART" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_CARD_AUTHORIZATIONS" 
  before insert on "CC_CARD_AUTHORIZATIONS"              
  for each row 
begin  
  if :new."ID" is null then
    select "CARD_AUTHORIZATIONS_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_CARD_AUTHORIZATIONS" ENABLE
/
CREATE OR REPLACE TRIGGER  "RP_RECURRING_PAYMENTS_T1" BEFORE insert on "RP_RECURRING_PAYMENTS"for each row  if :NEW."ID_PAYMENT" is null then     select "RP_SERVICE_SEQ".nextval into :NEW."ID_PAYMENT" from sys.dual;   end if; end; 
/
ALTER TRIGGER  "RP_RECURRING_PAYMENTS_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "CC_CONTRAGENTS_CLASSIFIER_T1" 
BEFORE
insert or update on "CC_CONTRAGENTS"
for each row
begin
INSERT INTO FINANCE.CC_CLASSIFIER (ID_CONTRAGENT)
    select :new.ID_CONTRAGENT
    from DUAL
    WHERE NOT EXISTS(select ID_CONTRAGENT 
                     from FINANCE.CC_CLASSIFIER 
                     where (ID_CONTRAGENT= :new.ID_CONTRAGENT));
end;

/
ALTER TRIGGER  "CC_CONTRAGENTS_CLASSIFIER_T1" DISABLE
/
CREATE OR REPLACE TRIGGER  "BI_credit_card" 
  before insert on "CC_CREDIT_CARD_PRE"              
  for each row 
begin  
  if :NEW.reference is null then
    select "CREDIT_CARD_SEQ".nextval into :NEW.reference from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_credit_card" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_RP_SERVICE" 
  before insert on "RP_SERVICE"               
  for each row  
begin   
  if :NEW."ID_SERVICE" is null then 
    select "RP_SERVICE_SEQ".nextval into :NEW."ID_SERVICE" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_RP_SERVICE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_REC_ACCOUNT"   before insert on "RP_CONTRAGENT"                 for each row    if :NEW."ID_CONTRAGENT" is null then     select "REC_ACCOUNT_SEQ".nextval into :NEW."ID_CONTRAGENT" from dual;   end if; end; 
/
ALTER TRIGGER  "BI_REC_ACCOUNT" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_PRE_RP" 
  before insert on "PRE_RP"               
  for each row  
begin   
  if :NEW."ID_PAYMENT" is null then 
    select "PRE_RP_SEQ".nextval into :NEW."ID_PAYMENT" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_PRE_RP" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CONTRAGENTS"   before insert on "CC_CONTRAGENTS"                 for each row    if :NEW."CONTRAGENT_ID" is null then     select "CONTRAGENTS_SEQ".nextval into :NEW."CONTRAGENT_ID" from dual;   end if; end; 
/
ALTER TRIGGER  "BI_CONTRAGENTS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CC_TYPE" 
  before insert on "CC_TYPE"               
  for each row  
begin   
  if :NEW."ID_TYPE" is null then 
    select "CC_TYPE_SEQ".nextval into :NEW."ID_TYPE" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CC_TYPE" ENABLE
/
CREATE OR REPLACE FORCE VIEW  "CC_BALANCE" ("Year", "tax", "bonus", "balance") AS 
  SELECT
         YEAR_CC AS "Year",
         SUM("debit") as "tax",
         SUM("credit") AS "bonus",
         SUM("credit") - SUM("debit") AS "balance"
      from
          CC_CREDIT_CARD
      WHERE
          "trname" = 'Бонус точки'
      OR
          "trname" = 'Такси картови операции'
      OR
          "trname" = 'Лихви кредитни карти'
      GROUP BY YEAR_CC
      order by YEAR_CC desc
/
CREATE OR REPLACE FORCE VIEW  "CC_CONTRAGENTS_EMP" ("CONTRAGENT_ID", "LEGAL_NAME", "SHORT_NAME", "ID_CONTRAGENT") AS 
  SELECT 
        "CONTRAGENT_ID",
		"LEGAL_NAME",
		"SHORT_NAME",
		CC_CONTRAGENTS.ID_CONTRAGENT
	FROM CC_CONTRAGENTS
	WHERE CC_CONTRAGENTS.SHORT_NAME IS NULL
	OR CC_CONTRAGENTS.ID_CONTRAGENT IS NULL
	ORDER BY ID_CONTRAGENT DESC, CONTRAGENT_ID DESC, LEGAL_NAME
/
CREATE OR REPLACE FORCE VIEW  "CC_EMPTY_ID_CONTRAGENT" ("contragent") AS 
  SELECT "contragent" FROM FINANCE.CC_CREDIT_CARD WHERE ID_CONTRAGENT IS NULL AND "contragent" IS NOT NULL
/
CREATE OR REPLACE FORCE VIEW  "CC_LOG" ("reference", "date_time", "value_date", "debit", "credit", "trname", "contragent", "rem_i", "rem_ii", "rem_iii", "YEAR_CC", "MONTH_CC", "DAY_CC", "WEEKDAY_BG", "PERIOD", "ID_CONTRAGENT", "TYPE_COL", "CLASSIFICATION_COL") AS 
  SELECT          
        "reference",              
        "date_time",             
        "value_date",             
        "debit",             
        "credit",             
        "trname",             
        "contragent",             
        "rem_i",             
        "rem_ii",             
        "rem_iii",              
        "YEAR_CC",             
        "MONTH_CC",              
        "DAY_CC",             
        "WEEKDAY_BG",             
        "PERIOD",             
        "ID_CONTRAGENT",             
        "TYPE",            
        "CLASSIFICATION_COL"        
    FROM CC_CREDIT_CARD        
    JOIN FINANCE.WEEKDAYS ON CC_CREDIT_CARD.ID_WEEKDAY = WEEKDAYS.ID_WEEKDAY        
    JOIN CC_TYPE ON CC_CREDIT_CARD.ID_TYPE = CC_TYPE.ID        
    JOIN CC_CLASSIFICATION ON CC_CREDIT_CARD.ID_CLASSIFICATION = CC_CLASSIFICATION.ID_CLASSIFICATION        
    ORDER BY "date_time" DESC, "value_date" DESC
/
CREATE OR REPLACE FORCE VIEW  "CC_SORT" ("reference", "date_time", "value_date", "debit", "credit", "trname", "contragent", "rem_i", "rem_ii", "rem_iii", "YEAR_CC", "MONTH_CC", "DAY_CC", "ID_WEEKDAY", "PERIOD", "ID_CONTRAGENT", "ID_TYPE", "ID_CLASSIFICATION") AS 
  SELECT          
        "reference"
        ,"date_time"
        ,"value_date"
        ,"debit","credit"
        ,"trname","contragent"
        ,"rem_i"
        ,"rem_ii"
        ,"rem_iii"
        ,"YEAR_CC"
        ,"MONTH_CC"
        ,"DAY_CC"
        ,"ID_WEEKDAY"
        ,"PERIOD"
        ,"ID_CONTRAGENT"
        ,"ID_TYPE"
        ,"ID_CLASSIFICATION"        
    FROM CC_CREDIT_CARD            
    ORDER BY "date_time" DESC, "value_date" DESC
/
CREATE OR REPLACE FORCE VIEW  "CONTRAGENTS_EMP" ("CONTRAGENT_ID", "LEGAL_NAME", "CONTRAGENT_COL", "ID_CONTRAGENT", "ID_CLASSIFICATION", "ID_TYPE") AS 
  SELECT 
		"CONTRAGENT_ID",
		"LEGAL_NAME",
		CC_CLASSIFIER."SHORT_NAME",
		CC_CONTRAGENTS.ID_CONTRAGENT,
		CC_CLASSIFIER."ID_CLASSIFICATION",
		CC_CLASSIFIER."ID_TYPE" 
	FROM CC_CONTRAGENTS
	LEFT JOIN CC_CLASSIFIER ON CC_CLASSIFIER.ID_CONTRAGENT = CC_CONTRAGENTS.ID_CONTRAGENT
	WHERE CC_CONTRAGENTS.ID_CONTRAGENT IS NULL
	   OR CC_CLASSIFIER."ID_CLASSIFICATION" IS NULL
	   OR CC_CLASSIFIER."ID_TYPE" IS NULL
	ORDER BY ID_CONTRAGENT DESC, CONTRAGENT_ID DESC, ID_CLASSIFICATION DESC, ID_TYPE DESC, LEGAL_NAME
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_FREQUENCY" ("CONTRAGENT", "#", "AVG_INTERVAL", "AVG_DEBIT", "MEDIAN_DEBIT", "STDDEV_DEBIT") AS 
  SELECT
    cc.SHORT_NAME as "CONTRAGENT",
    COUNT(c.ID_CONTRAGENT) as "#",
    ROUND(AVG(INTERVAL_DAYS),0) as "AVG_INTERVAL",
    ROUND(AVG(DEBIT),2) as "AVG_DEBIT", ROUND(MEDIAN(DEBIT),2) as "MEDIAN_DEBIT", ROUND(STDDEV(DEBIT),2) as "STDDEV_DEBIT"
    FROM
        (SELECT
            "value_date"
            ,ID_CONTRAGENT
            ,LEAD("value_date",1) OVER (PARTITION BY ID_CONTRAGENT ORDER BY "value_date" DESC) PREV_DATE
            ,"value_date" - LEAD("value_date",1) OVER (PARTITION BY ID_CONTRAGENT ORDER BY "value_date" DESC) AS "INTERVAL_DAYS"
            ,"debit" as DEBIT
            FROM CC_CREDIT_CARD
         ) c
    JOIN 
        (SELECT DISTINCT ID_CONTRAGENT, SHORT_NAME FROM CC_CONTRAGENTS) cc
    ON c.ID_CONTRAGENT = cc.ID_CONTRAGENT
    GROUP BY cc.SHORT_NAME
    ORDER BY "#" DESC
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_MONTHLY_STATS" ("MONTH_CC", "MIN_SUM_DEBIT", "AVG_SUM_DEBIT", "MEDIAN_SUM_DEBIT", "MAX_SUM_DEBIT", "STDDEV_SUM_DEBIT", "MIN_SUM_CREDIT", "AVG_SUM_CREDIT", "MEDIAN_SUM_CREDIT", "MAX_SUM_CREDIT", "STDDEV_SUM_CREDIT") AS 
  SELECT
    MONTH_CC,
    MIN(SUM_DEBIT) AS MIN_SUM_DEBIT,
    round(avg(SUM_DEBIT),2) as AVG_SUM_DEBIT,
    round(MEDIAN(SUM_DEBIT),2) as MEDIAN_SUM_DEBIT,
    MAX(SUM_DEBIT) AS MAX_SUM_DEBIT,
    round(STDDEV(SUM_DEBIT),2) as STDDEV_SUM_DEBIT,
    MIN(SUM_CREDIT) AS MIN_SUM_CREDIT,
    round(avg(SUM_CREDIT),2) as AVG_SUM_CREDIT,
    round(MEDIAN(SUM_CREDIT),2) as MEDIAN_SUM_CREDIT,
    MAX(SUM_CREDIT) AS MAX_SUM_CREDIT,
    round(STDDEV(SUM_CREDIT),2) as STDDEV_SUM_CREDIT
    FROM
    (
        SELECT
                YEAR_CC,
                MONTH_CC,
                SUM("debit") as SUM_DEBIT,
                SUM("credit") as SUM_CREDIT
            FROM CC_CREDIT_CARD
            GROUP BY YEAR_CC, MONTH_CC
            ORDER BY YEAR_CC DESC
        )
GROUP BY MONTH_CC
ORDER BY MONTH_CC
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_STAT_CONTRAGENT" ("SHORT_NAME", "DEBIT", "AVG_debit", "CNT", "AVG_INTERVAL", "TOTAL_INTERVAL") AS 
  SELECT
	SHORT_NAME,
	SUM(debit) AS DEBIT,
	ROUND(AVG(debit),2) AS "AVG_debit",
	COUNT(SHORT_NAME) AS CNT,
	--DATE_SINCE_LAST,
	ROUND(AVG(DATE_INTERVAL),0) AS AVG_INTERVAL,
	SUM(DATE_INTERVAL) AS TOTAL_INTERVAL
	FROM
(SELECT          
        "reference",
        "date_time",
        "value_date",
        "debit" AS "DEBIT",
        "credit",
        "trname",
        "contragent",
        "rem_i",
        "rem_ii",
        "rem_iii",
        "YEAR_CC",
        "MONTH_CC",
        "DAY_CC",
        w.WEEKDAY_NAME,
        "PERIOD",
        "SHORT_NAME",
        ct.TYPE,
        cl.CLASSIFICATION_COL,
        LAG("value_date",1) OVER (PARTITION BY cc.ID_CONTRAGENT ORDER BY "value_date" DESC) - "value_date" AS "DATE_INTERVAL",
        SYSDATE - "value_date" AS DATE_SINCE_LAST
    FROM FINANCE.CC_CREDIT_CARD cc
	JOIN FINANCE.CC_TYPE ct ON ct.ID = cc.ID_TYPE
	JOIN FINANCE.CC_CLASSIFICATION cl ON cl.ID_CLASSIFICATION = cc.ID_CLASSIFICATION
	JOIN FINANCE.WEEKDAYS w ON w.ID_WEEKDAY = cc.ID_WEEKDAY
	JOIN 
		(SELECT 
			DISTINCT ID_CONTRAGENT, 
					SHORT_NAME AS SHORT_NAME 
			FROM FINANCE.CC_CONTRAGENTS) con ON con.ID_CONTRAGENT = cc.ID_CONTRAGENT
    ORDER BY "date_time" DESC, "value_date" DESC) ccj
   	GROUP BY SHORT_NAME
   ORDER BY DEBIT DESC, CNT DESC, SHORT_NAME
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_STAT_MONTH" ("YEAR", "MONTH", "TRANSACTION #", "AVG Debit", "AVG Credit", "STDDEV Debit", "STDDEV Credit", "SUM Debit", "SUM Credit", "Balance", "TTL_AVG") AS 
  SELECT
    YEAR_CC AS "YEAR",
    MONTH_CC AS "MONTH",
    count("debit") AS "TRANSACTION #",
    ROUND(AVG("debit"),2) as "AVG Debit",
    ROUND(AVG("credit"),2) as "AVG Credit",
    ROUND(STDDEV("debit"),2) as "STDDEV Debit",
    ROUND(STDDEV("credit"),2) as "STDDEV Credit",
    SUM(NVL("debit",0))*-1 as "SUM Debit",
    SUM(nvl("credit",0)) as "SUM Credit",
    SUM(nvl("credit",0)) - SUM(NVL("debit",0)) AS "Balance",
    (SELECT AVG_SUM_DEBIT FROM CREDIT_CARD_MONTHLY_STATS WHERE CREDIT_CARD_MONTHLY_STATS.MONTH_CC = CC_CREDIT_CARD.MONTH_CC) - SUM(NVL("debit",0)) as TTL_AVG
FROM
    FINANCE.CC_CREDIT_CARD
GROUP BY YEAR_CC, MONTH_CC
ORDER BY YEAR_CC DESC, MONTH_CC
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_STAT_PERIOD" ("YEAR", "PERIOD", "TRANSACTION #", "AVG Debit", "AVG Credit", "STDDEV Debit", "STDDEV Credit", "SUM Debit", "SUM Credit") AS
    SELECT
        YEAR_CC as "YEAR"
        ,"PERIOD"
        ,count("debit") AS "TRANSACTION #"
        ,ROUND(AVG("debit"),2) as "AVG Debit"
        ,ROUND(AVG("credit"),2) as "AVG Credit"
        ,ROUND(STDDEV("debit"),2) as "STDDEV Debit"
        ,ROUND(STDDEV("credit"),2) as "STDDEV Credit"
        ,SUM("debit") as "SUM Debit"
        ,SUM("credit") as "SUM Credit"    
    FROM CC_CREDIT_CARD    
    GROUP BY YEAR_CC, "PERIOD"
    ORDER BY YEAR_CC DESC, "PERIOD"
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_STAT_YEAR" ("YEAR", "TRANSACTION #", "AVG Debit", "AVG Credit", "AVG Monthly Debit", "STDDEV Debit", "STDDEV Credit", "SUM Debit", "SUM Credit", "Balance") AS 
  SELECT YEAR_CC AS "YEAR",
	COUNT("debit") AS "TRANSACTION #",
	ROUND(AVG("debit"),2) as "AVG Debit",
	ROUND(SUM("debit")/COUNT("debit"),2) as "AVG Monthly Debit",
	ROUND(AVG("credit"),2) as "AVG Credit",
	ROUND(STDDEV("debit"),2) as "STDDEV Debit",
	ROUND(STDDEV("credit"),2) as "STDDEV Credit",
	SUM(nvl("debit",0)) *-1 as "SUM Debit",
	SUM(Nvl("credit",0)) as "SUM Credit",
	SUM(NVL("credit",0)) - SUM(nvl("debit",0)) as "Balance"
FROM
	FINANCE.CC_CREDIT_CARD
GROUP BY YEAR_CC
ORDER BY YEAR_CC DESC
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_TYPE_YEAR" ("YEAR", "TYPE", "TRANSACTION #", "SUM Debit", "AVG Debit", "AVG Monthly Debit", "STDDEV Debit") AS 
  SELECT 
      		YEAR_CC AS "YEAR",
			ct.TYPE as "TYPE",
			COUNT("debit") AS "TRANSACTION #",
			SUM(nvl("debit",0)) as "SUM Debit",
			ROUND(AVG("debit"),2) as "AVG Debit",
			ROUND(SUM("debit")/COUNT("debit"),2) as "AVG Monthly Debit",
			ROUND(STDDEV("debit"),2) as "STDDEV Debit"
			FROM	
				FINANCE.CC_CREDIT_CARD c
			JOIN CC_CLASSIFIER clas ON clas.ID_CONTRAGENT = c.ID_CONTRAGENT
			JOIN CC_TYPE ct on ct.ID = clas.ID_TYPE
			GROUP BY YEAR_CC, ct.TYPE
			ORDER BY YEAR_CC DESC, "SUM Debit" DESC
/
CREATE OR REPLACE FORCE VIEW  "PRE_RP_SORTED" ("TIME_STAMP", "CONTRAGENT", "AMOUNT", "REF_NUMBER1", "REF_NUMBER2", "YEAR", "MONTH", "DAY", "ID_WEEKDAY", "ID_CONTRAGENT", "ID_ACCOUNT") AS 
  SELECT 
        TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS') AS TIME_STAMP,
        PRE_RP.CONTRAGENT,
        TO_NUMBER( REPLACE(PRE_RP.AMOUNT, ' BGN')) AS AMOUNT,
        PRE_RP.REF_NUMBER1,
        PRE_RP.REF_NUMBER2,
        EXTRACT(YEAR FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS YEAR,
        EXTRACT(MONTH FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS MONTH,
        EXTRACT(DAY FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS DAY,
        TO_NUMBER(TO_CHAR(TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS'), 'd')),
        NULL,
        NULL
    FROM	PRE_RP
    ORDER BY TIME_STAMP DESC
/
CREATE OR REPLACE FORCE VIEW  "PR_STAT_QUARTER" ("Тримесечие", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT      
        CEIL(MONTH_RP/3) AS "Тримесечие",    
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        ROUND(SUM(RP_RECURRING_PAYMENTS.AMMOUNT)/(select max(YEAR_RP)-min(YEAR_RP) FROM RP_RECURRING_PAYMENTS),2) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    GROUP BY CEIL(MONTH_RP/3)
    ORDER BY CEIL(MONTH_RP/3)
/
CREATE OR REPLACE FORCE VIEW  "RP_DESCRIPTIONS" ("ID_PAYMENT", "TIME_STAMP", "CONTRAGENT", "AMMOUNT", "AVG_AMMOUNT", "STDDEV_AMMOUNT", "YEAR_RP", "MONTH_RP", "DAY_RP", "WEEKDAY_BG", "ACCOUNT_NAME", "SERVICE_NAME") AS 
  SELECT 
    ID_PAYMENT,
    TIME_STAMP,
    rp.CONTRAGENT,
    AMMOUNT,
    AVG_AMMOUNT,
    STDDEV_AMMOUNT,
    YEAR_RP,
    MONTH_RP,
    DAY_RP,
    WEEKDAY_BG,
    ACCOUNT_NAME,
    SERVICE_NAME
    from RP_RECURRING_PAYMENTS rp
    JOIN (select 
                CONTRAGENT,
                COUNT(*) as CNT,
                ROUND(AVG(AMMOUNT),2) "AVG_AMMOUNT",
                ROUND(STDDEV(AMMOUNT),2) "STDDEV_AMMOUNT"
                from RP_RECURRING_PAYMENTS
                GROUP BY CONTRAGENT
                ORDER BY CNT DESC) stats
    ON rp.CONTRAGENT = stats.CONTRAGENT
    JOIN WEEKDAYS on WEEKDAYS.ID_WEEKDAY = rp.ID_WEEKDAY
    JOIN RP_ACCOUNTS ON RP_ACCOUNTS.ID_ACCOUNT = rp.ID_ACCOUNT
    JOIN RP_CONTRAGENT ON RP_CONTRAGENT.ID_CONTRAGENT = rp.ID_CONTRAGENT
    JOIN RP_SERVICE ON RP_SERVICE.ID_SERVICE = RP_CONTRAGENT.ID_SERVICE
    ORDER BY TIME_STAMP DESC
/
CREATE OR REPLACE FORCE VIEW  "RP_SORTED" ("ID_PAYMENT", "TIME_STAMP", "CONTRAGENT", "AMMOUNT", "REF_NUMBER1", "REF_NUMBER2", "YEAR_RP", "MONTH_RP", "DAY_RP", "ID_WEEKDAY", "ID_CONTRAGENT", "ID_ACCOUNT", "SERVICE") AS 
  SELECT 
	rp."ID_PAYMENT",
	rp."TIME_STAMP",
	rp."CONTRAGENT",
	rp."AMMOUNT",
	rp."REF_NUMBER1",
	rp."REF_NUMBER2",
	rp."YEAR_RP",
	rp."MONTH_RP",
	rp."DAY_RP",
	wd.WEEKDAY_NAME,
	rpc."ID_CONTRAGENT",
	rpc."ID_ACCOUNT",
	rps."SERVICE_NAME"
from rp_recurring_payments rp
JOIN RP_CONTRAGENT rpc ON rpc.ID_CONTRAGENT = rp.ID_CONTRAGENT
JOIN RP_SERVICE rps ON rps.ID_SERVICE = rpc.ID_SERVICE
JOIN WEEKDAYS wd ON wd.ID_WEEKDAY = rp.ID_WEEKDAY 
order by TIME_STAMP DESC
/
CREATE OR REPLACE FORCE VIEW  "RP_STAT" ("Година", "Тримесечие", "Месец", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT  
        YEAR_RP AS "Година",    
        CEIL(MONTH_RP/3) AS "Тримесечие",    
        MONTH_RP AS "Месец",
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        SUM(RP_RECURRING_PAYMENTS.AMMOUNT) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    GROUP BY YEAR_RP, MONTH_RP
    ORDER BY YEAR_RP DESC, MONTH_RP
/
CREATE OR REPLACE FORCE VIEW  "RP_YEAR_STAT" ("Година", "ACCOUNT_NAME", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT  
        YEAR_RP AS "Година",
        ra.ACCOUNT_NAME,
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        SUM(RP_RECURRING_PAYMENTS.AMMOUNT) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    JOIN RP_ACCOUNTS ra on ra.ID_ACCOUNT = RP_RECURRING_PAYMENTS.ID_ACCOUNT
    GROUP BY YEAR_RP, ra.ACCOUNT_NAME
    ORDER BY YEAR_RP
/
CREATE OR REPLACE FORCE VIEW  "V_CARD_AUTHORIZATIONS" ("ID", "REFERENCE", "PROC_CODE", "ACT_CODE", "PAN_STARS", "FUNC_CODE", "TERM_NAME_LOC", "TR_CCY", "TR_AM", "CH_CCY", "CH_AM", "REST_AM", "IBAN", "MCC", "SMS_REGISTRATION", "APPROVED", "ERR", "NOTE", "MSG_ID", "TR_DATE12", "CARD_REF_H", "DR_CR_IND", "OPERATION", "DATE_TERM") AS 
  SELECT 
        cca."ID"
        ,ca.REFERENCE,
        "PROC_CODE",
        "ACT_CODE",
        "PAN_STARS",
        "FUNC_CODE",
        "TERM_NAME_LOC",
        "TR_CCY",
        "TR_AM",
        "CH_CCY",
        "CH_AM",
        "REST_AM",
        "IBAN",
        "MCC",
        "SMS_REGISTRATION",
        "APPROVED",
        "ERR",
        "NOTE",
        "MSG_ID",
        "TR_DATE12",
        "CARD_REF_H",
        "DR_CR_IND",
        "OPERATION",
        "DATE_TERM"
    FROM CC_CARD_AUTHORIZATIONS cca
    LEFT JOIN CC_AUTH ca ON cca.ID = ca.ID
    ORDER BY NOTE DESC
/
CREATE OR REPLACE FORCE VIEW  "V_CARD_TO_AUTH" ("reference", "ID", "value_date", "TR_DATE12", "contragent", "TERM_NAME_LOC", "debit", "TR_AM", "CH_AM") AS 
  	SELECT 
          "reference"
          ,ID
          ,"value_date"
          ,TR_DATE12
          ,"contragent"
          ,TERM_NAME_LOC
          ,"debit"
          ,TR_AM
          ,CH_AM
    FROM CC_CREDIT_CARD ccc, CC_CARD_AUTHORIZATIONS ca
    WHERE "contragent" LIKE TERM_NAME_LOC || '%'AND "value_date" = TR_DATE12
    AND "debit" = CH_AM
    ORDER BY "value_date" DESC, TR_DATE12 DESC
/
CREATE OR REPLACE FORCE VIEW  "V_CC_DST_FROM_AVERAGE" ("YEAR", "MONTH", "DST_DEBIT", "DST_CREDIT", "DST_BALANCE") AS 
  SELECT 
        ccc.YEAR_CC AS "YEAR"	
        ,ccc.MONTH_CC AS "MONTH"	
        ,ROUND((SUM("debit") - (SELECT AVG_DEBIT FROM V_CC_MONTHLY_STATS vcms WHERE VCMS."MONTH" = ccc.MONTH_CC)) / (SELECT STD_DEBIT FROM V_CC_MONTHLY_STATS vcms WHERE VCMS."MONTH" = ccc.MONTH_CC),2) AS DST_DEBIT	
        ,ROUND((SUM("credit") - (SELECT AVG_CREDIT FROM V_CC_MONTHLY_STATS vcms WHERE VCMS."MONTH" = ccc.MONTH_CC)) / (SELECT STD_CREDIT FROM V_CC_MONTHLY_STATS vcms WHERE VCMS."MONTH" = ccc.MONTH_CC),2) AS DST_CREDIT	
        ,ROUND(((SUM("debit") - SUM("credit")) - (SELECT AVG_BALANCE FROM V_CC_MONTHLY_STATS vcms WHERE VCMS."MONTH" = ccc.MONTH_CC)) / (SELECT STD_BALANCE FROM V_CC_MONTHLY_STATS vcms WHERE VCMS."MONTH" = ccc.MONTH_CC),2) AS DST_BALANCE
    FROM FINANCE.CC_CREDIT_CARD ccc
    GROUP BY ccc.YEAR_CC, ccc.MONTH_CC
    ORDER BY ccc.YEAR_CC DESC, ccc.MONTH_CC
/
CREATE OR REPLACE FORCE VIEW  "V_CC_MONTHLY_STATS" ("MONTH", "AVG_DEBIT", "AVG_CREDIT", "AVG_BALANCE", "STD_DEBIT", "STD_CREDIT", "STD_BALANCE", "MIN_CREDIT", "MIN_DEBIT", "MIN_BALANCE", "MAX_CREDIT", "MAX_DEBIT", "MAX_BALANCE") AS 
  SELECT 
        "MONTH"	
        ,ROUND(AVG(DEBIT),3) AS AVG_DEBIT	
        ,ROUND(AVG(CREDIT),3) AS AVG_CREDIT	
        ,ROUND(AVG(BALANCE),3) AS AVG_BALANCE	
        ,ROUND(STDDEV(DEBIT),3) AS STD_DEBIT	
        ,ROUND(STDDEV(CREDIT),3) AS STD_CREDIT	
        ,ROUND(STDDEV(BALANCE),3) AS STD_BALANCE	
        ,ROUND(MIN(CREDIT),3) AS MIN_CREDIT	,ROUND(MIN(DEBIT),3) AS MIN_DEBIT	
        ,ROUND(MIN(BALANCE),3) AS MIN_BALANCE	
        ,ROUND(MAX(CREDIT),3) AS MAX_CREDIT	
        ,ROUND(MAX(DEBIT),3) AS MAX_DEBIT	
        ,ROUND(MAX(BALANCE),3) AS MAX_BALANCE
    FROM 
        (SELECT
            YEAR_CC AS "YEAR"			
            ,MONTH_CC AS "MONTH"			
            ,SUM("debit") AS DEBIT			
            ,SUM("credit") AS CREDIT			
            ,SUM("debit") - SUM("credit") AS BALANCE		
        FROM CC_CREDIT_CARD ccc		
        GROUP BY YEAR_CC, MONTH_CC		
        ORDER BY YEAR_CC DESC, MONTH_CC	)
    GROUP BY "MONTH"ORDER BY "MONTH"
/
CREATE OR REPLACE FORCE VIEW  "V_CC_TAXES" ("YEAR", "MONTH", "CC_TAXES") AS 
  SELECT 
        YEAR_CC AS YEAR,
        MONTH_CC AS MONTH ,
        SUM("debit") AS CC_TAXES
    FROM CC_CREDIT_CARD 
    WHERE "rem_iii" = 'Такса плащане ПОС'
        or "rem_iii" = 'Такса за превалутиране'
    GROUP BY YEAR_CC, MONTH_CC
    ORDER BY YEAR_CC DESC, MONTH_CC
/
CREATE OR REPLACE FORCE VIEW  "V_DC_FIB_BALANCE" ("ID", "REFERENCE", "DATETIME", "VALUEDATE", "DEBIT", "CREDIT", "TRNAME", "CONTRAGENT", "REM_I", "REM_II", "REM_III", "SUM_DEBIT", "SUM_CREDIT", "RUNNING_BALANCE") AS 
  SELECT 
	ID
	,REFERENCE
	,DATETIME
	,VALUEDATE
	,DEBIT
	,CREDIT
	,TRNAME 
	,CONTRAGENT
	,REM_I 
	,REM_II 
	,REM_III 
	,(SELECT SUM(DEBIT) FROM DC_FIB_SMART dfs2 WHERE dfs2.DATETIME <= dfs.DATETIME) AS SUM_DEBIT
	,(SELECT SUM(CREDIT) FROM DC_FIB_SMART dfs2 WHERE dfs2.DATETIME <= dfs.DATETIME) AS SUM_CREDIT
	,(SELECT SUM(CREDIT) FROM DC_FIB_SMART dfs2 WHERE dfs2.DATETIME <= dfs.DATETIME) - (SELECT SUM(DEBIT) FROM DC_FIB_SMART dfs2 WHERE dfs2.DATETIME <= dfs.DATETIME) AS RUNNING_BALANCE
	FROM DC_FIB_SMART dfs 
    ORDER BY DATETIME
/
CREATE OR REPLACE FORCE VIEW  "V_DC_FIB_CONTRAGENTS_BY_YEAR" ("YEAR", "CONTRAGENT", "DEBIT", "CREDIT") AS 
  SELECT 
		EXTRACT(year FROM dfs2.DATETIME) "YEAR"
		,CONTRAGENT
		,SUM(DEBIT) AS DEBIT
		,SUM(CREDIT) AS CREDIT
	FROM DC_FIB_SMART dfs2 
	GROUP BY EXTRACT(year FROM dfs2.DATETIME) ,CONTRAGENT 
	ORDER BY EXTRACT(year FROM dfs2.DATETIME) DESC, dfs2.CONTRAGENT
/
CREATE OR REPLACE FORCE VIEW  "V_DC_N26_CONTRAGENTS_BY_YEAR" ("YEAR", "CATEGORY", "PAYEE", "CREDIT", "DEBIT") AS 
    SELECT
        EXTRACT (YEAR FROM DATECOL) AS "YEAR"
        ,CATEGORY
        ,PAYEE
        ,SUM(CASE WHEN AMOUNT_EUR>=0 THEN AMOUNT_EUR END ) AS CREDIT
        ,SUM(CASE WHEN AMOUNT_EUR<0 THEN AMOUNT_EUR END ) AS DEBIT
    FROM DC_N26
    GROUP BY EXTRACT (YEAR FROM DATECOL), CATEGORY, PAYEE
    ORDER BY SUM(AMOUNT_EUR) ASC
/